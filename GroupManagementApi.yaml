openapi: 3.0.0
info:
  title: Student Group Management API
  description: API for managing groups and students in a school system.
  version: 1.0.0
paths:
  /groups:
    get:
      summary: Get all groups
      description: Retrieve a list of groups, optionally filtered by group name or year.
      parameters:
        - name: groupName
          in: query
          description: Filter by group name.
          schema:
            type: string
        - name: groupYearRange
          in: query
          description: Filter by a year range. Specify the range as "startYear-endYear".
          schema:
            type: string
            example: "2020-2023"
      responses:
        '200':
          description: A list of groups.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Group'
    post:
      summary: Create a new group
      description: Add a new group with details.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
      responses:
        '201':
          description: Group created successfully.
    put:
      summary: Update or create a group
      description: Update an existing group or create a new one if it doesn't exist. This operation is idempotent.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Group'
      responses:
        '200':
          description: Group updated successfully.
    delete:
      summary: Delete a group
      parameters:
        - name: groupId
          in: query
          description: The ID of the group to delete.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Group deleted successfully.
  /students:
    get:
      summary: Get all students
      description: Retrieve a list of students, optionally filtered by name or group.
      parameters:
        - name: studentName
          in: query
          description: Filter by student name.
          schema:
            type: string
        - name: groupName
          in: query
          description: Filter by group name.
          schema:
            type: string
      responses:
        '200':
          description: A list of students.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Student'
    post:
      summary: Add a new student
      description: Create a new student with details.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Student'
      responses:
        '201':
          description: Student created successfully.
    put:
      summary: Update or create a student
      description: Update an existing student or create a new one if it doesn't exist. This operation is idempotent.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Student'
      responses:
        '200':
          description: Student updated successfully.
    delete:
      summary: Delete a student
      parameters:
        - name: studentId
          in: query
          description: The ID of the student to delete.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Student deleted successfully.
components:
  schemas:
    Group:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the group.
        groupName:
          type: string
          description: Name of the group.
          example: "J2"
        groupYear:
          type: integer
          description: The year the group was created.
          example: 2024
        promotion:
          type: string
          enum:
            - G
            - H
            - J
            - K
          description: Promotion of the group.
        studentNb:
          type: integer
          description: Number of students in the group.
          example: 20
        students:
          type: array
          description: List of students in the group.
          items:
            $ref: '#/components/schemas/Student'
    Student:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the student.
        studentName:
          type: string
          description: Name of the student.
        sex:
          type: string
          enum:
            - M
            - F
          description: Sex of the student.
        birthdate:
          type: string
          format: date
          description: Birthdate of the student.
        reference:
          type: string
          description: Unique reference for the student.
          example: "STD21001"
        group:
          type: string
          description: Name of the group the student belongs to.
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/HEIKENNY4/gestion_etudiant_api/1.0.0
  - url: https://mockserver.example.com
    description: Mock server for testing API requests.